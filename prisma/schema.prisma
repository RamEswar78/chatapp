// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatType {
  direct
  group
}

enum ParticipantRole {
  admin
  member
}

enum MessageType {
  text
  image
  file
  audio
  video
}

model User {
  id                    Int       @id @default(autoincrement())
  username              String    @unique @db.VarChar(50)
  email                 String    @unique @db.VarChar(100)
  phone                 String?   @db.VarChar(20)
  passwordHash          String?   @map("password_hash") @db.VarChar(255)
  avatarUrl             String?   @map("avatar_url") @db.VarChar(255)
  about                 String?   @default("Hey there! I am using the app.") @db.Text
  isVerified            Boolean   @default(false) @map("is_verified")
  isOnline              Boolean   @default(false) @map("is_online")
  lastSeen              DateTime? @map("last_seen")
  notificationsEnabled  Boolean   @default(true) @map("notifications_enabled")
  readReceiptsEnabled   Boolean   @default(true) @map("read_receipts_enabled")
  lastSeenVisible       Boolean   @default(true) @map("last_seen_visible")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  createdChats          Chat[]              @relation("ChatCreator")
  participantIn         ChatParticipant[]
  sentMessages          Message[]
  messageReadStatus     MessageReadStatus[]
  sessions              UserSession[]
  typingIndicators      TypingIndicator[]
  preferences           UserPreferences?
  contacts              UserContact[]       @relation("UserContacts")
  contactOf             UserContact[]       @relation("ContactUser")

  @@index([email])
  @@index([username])
  @@index([isOnline])
  @@map("users")
}

model OtpVerification {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(100)
  otpCode   String   @map("otp_code") @db.VarChar(6)
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  attempts  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email, otpCode])
  @@index([expiresAt])
  @@map("otp_verifications")
}

model Chat {
  id          Int        @id @default(autoincrement())
  chatType    ChatType   @default(direct) @map("chat_type")
  name        String?    @db.VarChar(100)
  description String?    @db.Text
  avatarUrl   String?    @map("avatar_url") @db.VarChar(255)
  createdBy   Int?       @map("created_by")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  creator             User?               @relation("ChatCreator", fields: [createdBy], references: [id])
  participants        ChatParticipant[]
  messages            Message[]
  typingIndicators    TypingIndicator[]

  @@index([createdBy])
  @@index([chatType])
  @@map("chats")
}

model ChatParticipant {
  id       Int             @id @default(autoincrement())
  chatId   Int             @map("chat_id")
  userId   Int             @map("user_id")
  role     ParticipantRole @default(member)
  joinedAt DateTime        @default(now()) @map("joined_at")
  leftAt   DateTime?       @map("left_at")
  isActive Boolean         @default(true) @map("is_active")

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@index([isActive])
  @@map("chat_participants")
}

model Message {
  id                Int         @id @default(autoincrement())
  chatId            Int         @map("chat_id")
  senderId          Int         @map("sender_id")
  content           String      @db.Text
  messageType       MessageType @default(text) @map("message_type")
  fileUrl           String?     @map("file_url") @db.VarChar(255)
  fileName          String?     @map("file_name") @db.VarChar(255)
  fileSize          Int?        @map("file_size")
  replyToMessageId  Int?        @map("reply_to_message_id")
  isEdited          Boolean     @default(false) @map("is_edited")
  editedAt          DateTime?   @map("edited_at")
  isDeleted         Boolean     @default(false) @map("is_deleted")
  deletedAt         DateTime?   @map("deleted_at")
  createdAt         DateTime    @default(now()) @map("created_at")

  // Relations
  chat            Chat                  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User                  @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyToMessage  Message?              @relation("MessageReply", fields: [replyToMessageId], references: [id])
  replies         Message[]             @relation("MessageReply")
  readStatus      MessageReadStatus[]

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([messageType])
  @@map("messages")
}

model MessageReadStatus {
  id        Int      @id @default(autoincrement())
  messageId Int      @map("message_id")
  userId    Int      @map("user_id")
  readAt    DateTime @default(now()) @map("read_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_read_status")
}

model UserSession {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  jwtTokenHash String    @map("jwt_token_hash") @db.VarChar(255)
  deviceInfo   Json?     @map("device_info")
  ipAddress    String?   @map("ip_address") @db.Inet
  expiresAt    DateTime  @map("expires_at")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  lastUsedAt   DateTime  @default(now()) @map("last_used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_sessions")
}

model TypingIndicator {
  id        Int      @id @default(autoincrement())
  chatId    Int      @map("chat_id")
  userId    Int      @map("user_id")
  isTyping  Boolean  @default(true) @map("is_typing")
  startedAt DateTime @default(now()) @map("started_at")
  expiresAt DateTime @map("expires_at")

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([expiresAt])
  @@map("typing_indicators")
}

model UserPreferences {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique @map("user_id")
  theme               String   @default("dark") @db.VarChar(20)
  language            String   @default("en") @db.VarChar(10)
  fontSize            String   @default("medium") @map("font_size") @db.VarChar(20)
  notificationSound   String?  @map("notification_sound") @db.VarChar(100)
  chatWallpaper       String?  @map("chat_wallpaper") @db.VarChar(255)
  autoDownloadMedia   Boolean  @default(true) @map("auto_download_media")
  backupFrequency     String   @default("daily") @map("backup_frequency") @db.VarChar(20)
  preferencesJson     Json?    @map("preferences_json")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserContact {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  contactUserId Int      @map("contact_user_id")
  contactName   String?  @map("contact_name") @db.VarChar(100)
  isBlocked     Boolean  @default(false) @map("is_blocked")
  isFavorite    Boolean  @default(false) @map("is_favorite")
  addedAt       DateTime @default(now()) @map("added_at")

  // Relations
  user        User @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contactUser User @relation("ContactUser", fields: [contactUserId], references: [id], onDelete: Cascade)

  @@unique([userId, contactUserId])
  @@index([userId])
  @@index([contactUserId])
  @@map("user_contacts")
}
